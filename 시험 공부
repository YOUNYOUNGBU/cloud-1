온디맨드: IT자원을 사용자가 원하는 만큼 제공
온프레미스: 공간과 자을 활용하여 사용자가 직접 구축
클라우드 컴퓨팅 이점: Aglity(민첩성): 빠르게 구축 가능 Elastic(탄력성): 확장 및 축소가능, coast saving: 비용 절감 사용한 만큼 지불 케바케, 손쉬운 글로벌 서비스, 트래픽 폭주 제어, 
                    빅데이터, 인공지능 서비스 확장
클라우드 컴퓨팅 유형: laas: 서버, 스토리지, 네트워크 서비스 제공, 사용자가 os및 애플리케이션 관리. paas 서비스: 개발 및 배포, 서버 관리 불필요. saas: 소프트웨어 설치 없이 가능 유지보수
aws의 lass 서비스: EC2(가상서버), S3(클라우드 스토리지), VPC(가상 네트워크), EBS(블록 스토리지)
aws의 paas 서비스: aws lambda(서버리스), aws elastic beanstalk(자동 배포), amazon rds(관리형 데이터베이스), aws fragate(컨테이너)
aws의 saas 서비스: amazon workdocs(문서 관리 및 협업), amazon chime(화상 회의), aws managed services(완전 ~~~)
aws의 핵심 서비스: 컴퓨팅 서비스, 스토리지 서비스, 데이터 서비스, 보안, 네트워크 서비스
컴퓨팅 서비스: ec2, lambda
스토리지 서비스: s3, ebs
데이터베이스 서비스: daymanoDB, RDS
네트워크 서비스: ROUTES 53, cloudfront, vpc 
보안 및 접근: security group, iam

aws구조
리전: 가장 큰 단위
전세계로 뻗어있음. 서버의 물리적인 위치. 각 리전별 고유 코드, 각리전별 서비스 다름
리전 고를 시 고려사항: 법률, 필요한 서비스, 지연속도
us-east-1 리전: 최초 서비스 되는 리전

가용영역: 하나이상의 데이터 센터 리전안에 두개이상 가용영역 존재, 100km 이내, 빠른 네트워크 , 재해 
가용역역 위치: 각 계정별 az 코드 실제 위치 다름

엣지 로케이션: 서비스를 빠른속도로 제공하기 위한 거점
global acceleratro 와 유저 연결
cdn: 컨텐츠를 빠르게 전송 기술

arn: 고유 아이디
vpc: 가상 네트워크
리전단위

구성요소
subnet: 특정 범위를 나눈 범위
routetable 트래픽 전달 위치 명시
internet gw 인터넷 통신 활성화
nat gw 인터넷 통신 연결
vpc endpoint 비공개연결

iam: aws 리소스 접근 제어
주요기능: 
aws 리소스 접근 제어
policy 기반 접근 관리
mfa 적용 가능
루트 계정 보안
iam 역할 및 서비스 연동

주의할 점:
루트 계정 최소화
최소한 권한 부여
키 노출 금지
정책 설정 잘 해야 댐
pem: ssh로 쉽게 활용 가능
ppk: putty에서 사용

S3버킷 정책
리소스 기반 정책
언제 누가 무엇을 어떻게 할수있는가를 정의

"Resource": [
              "arn:aws:s3:::sgu-202500-s3-test/class/img/*",
               "arn:aws:s3:::sgu-205233-s3-test/index.html"
]

"Condition":{
        "IpAddress": {
                      "aws:SourceIp": "241242.42414.24124.214"
}}

{ 
  "Sid": "DenyGetObject",
  "Effect": "Deny",
  "Principal: "*",
  "Action": "GetObject",
  "Resouces": "arn:aws:s3:::gddkgsgkgskgskgs"
}

Scaling: 요청이 많아 질때 서버를 키우는 것
AutoScaling: 트래픽 상황에 맞춰 서버 수를 자동으로 늘리거나 줄이는 것
스케일 업: 서버 한대 성능을 높이는 것(vertical scaling)
장점: 단순하고 설정이 쉬움
단점: 재시작 필요성, 물리적인 한계, 서버 한대에 의존

스케일 다운: 서버 수를 늘려서 처리 성능을 확장 시키는 것(Horizantal scaling)
장점: 무중단 확장 가능
단점: 복잡한 아키텍처, ELB 구성 필요

Auto Scaling 구성요소
1. launch templete: 설계도
2. autoscaling group: 인스턴스를 묶어서 관리하는 단위
3. scaling policy: 언제 어떻게 서버수를 조절할지에 대한 정책
4. cloud watch: 스케일링 정책을 실행하는 것

ELB: 트래픽 분산 시스템
특징
1. 여러 서비스의 트래픽 분산 가능
2. Health Check
3. auto scaling 과 연동가능
4. ip 고정 불가능
5. 여러 가용역역에 분산 가능

종류
1. Application Load Balancer: 똑똑하다.
2. Network Load Balancer: 빠르다
3. Classic Load Balancer: 옛날

ALB - Target Group
트래픽을 분산시킬 대상을 논리적으로 묶어놓은 그룹
